<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.melon.dao.album.IAlbumDao">

    <select id="selectRecentAlbum" resultType="com.melon.dto.album.AlbumDto">
        <![CDATA[
	        SELECT * FROM (
	            SELECT
	                AR.ARTIST_NAME AS artistName,
	                AL.ALBUM_NAME AS albumName,
	                AL.RELEASE_DATE AS releaseDate,
	                S.SONG_NAME AS songName
	            FROM
	                SONG S, ALBUM AL, ARTIST AR, GENRE G
	            WHERE
	                S.ARTIST_ID = AR.ARTIST_ID
	            AND
	                S.ALBUM_ID = AL.ALBUM_ID
	            AND
	                S.GENRE_ID = G.GENRE_ID
	            AND
	                TO_DATE(AL.RELEASE_DATE, 'YYYY-MM-DD') >= SYSDATE - 30
	            ORDER BY
	                AL.RELEASE_DATE DESC)
        ]]>
    </select>
    
    <select id="selectOriginRecentAlbum" resultType="com.melon.dto.album.AlbumDto">
        SELECT * FROM (
            SELECT
                AR.ARTIST_NAME AS artistName,
                AL.ALBUM_NAME AS albumName,
                AL.RELEASE_DATE AS releaseDate,
                S.SONG_NAME AS songName
            FROM
                SONG S, ALBUM AL, ARTIST AR, GENRE G
            WHERE
                S.ARTIST_ID = AR.ARTIST_ID
            AND
                S.ALBUM_ID = AL.ALBUM_ID
            AND
                S.GENRE_ID = G.GENRE_ID
            <![CDATA[
            AND
                TO_DATE(AL.RELEASE_DATE, 'YYYY-MM-DD') >= SYSDATE - 30
            ]]>
            <if test="origin=='all'">
            AND
            	G.GENRE_ID &gt;= 0
        	</if>
        	<if test="origin=='foreign'">
            AND
            	G.GENRE_ID = 6
        	</if>
        	<if test="origin=='domestic'">
            AND
            	G.GENRE_ID &lt; 6
        	</if>
            ORDER BY
                AL.RELEASE_DATE DESC)
    </select>

    <select id="selectAlbumDetails" parameterType="int" resultType="com.melon.dto.album.AlbumDetails">
        SELECT
            A.album_id as albumId,
            A.release_date as releaseDate,
            A.album_publisher as albumPublisher,
            A.album_agency as albumAgency,
            A.album_type as albumType,
            S.song_name as songName,
            S.song_id as songId,
            AR.artist_name as artistName,
            G.genre_name as genreName,
            AR.artist_id as artistId,
            A.album_name as albumName
        FROM
            ALBUM A, SONG S, ARTIST AR, GENRE G
        WHERE
            A.album_id = S.album_id
          AND
            S.genre_id = G.genre_id
          AND
            AR.artist_id = S.artist_id
          AND
            A.album_id = #{albumId}
          AND
            ROWNUM = 1
    </select>

    <select id="selectAlbumSongList" parameterType="int" resultType="com.melon.dto.album.AlbumDetails">
        SELECT
            A.ALBUM_ID AS albumId,
            A.ALBUM_NAME AS albumName,
            S.SONG_ID AS songId,
            S.SONG_NAME AS songName,
            AR.ARTIST_NAME AS artistName,
            AR.ARTIST_ID AS artistId,
            A.ALBUM_LIKE AS albumLike,
            S.SONG_LIKE AS songLike
        FROM
            ALBUM A, SONG S, ARTIST AR
        WHERE
            A.ALBUM_ID = S.ALBUM_ID
          AND
            S.ARTIST_ID = AR.ARTIST_ID
          AND
            A.ALBUM_ID = #{albumId}
    </select>

    <select id="selectAlbumDetail" parameterType="int" resultType="com.melon.dto.album.AlbumDetails">
        SELECT
            A.ALBUM_ID AS albumId,
            S.SONG_ID AS songId,
            A.ALBUM_NAME AS albumName,
            AR.ARTIST_NAME AS artistName,
            AR.AGENCY AS artistAgency,
            A.ALBUM_PRO AS albumPro,
            G.GENRE_NAME AS genreName
        FROM
            ALBUM A, SONG S, ARTIST AR, GENRE G
        WHERE
            A.ALBUM_ID = S.ALBUM_ID
          AND
            S.ARTIST_ID = AR.ARTIST_ID
          AND
            S.GENRE_ID = G.GENRE_ID
          AND
            A.ALBUM_ID = #{albumId}
          AND
            ROWNUM = 1
    </select>

    <insert id="saveComment" parameterType="com.melon.dto.comment.CommentDto">
        INSERT INTO ALBUM_COMMENT
            (ALBUM_ID, COMMENT_ID, MEMBER_ID, COMMENT_DETAIL, COMMENT_DATE)
        VALUES
            (#{albumId},
             COMMENT_ID_SEQ.nextval,
             #{memberId},
             #{commentDto.commentDetail},
             sysdate)
    </insert>

    <delete id="deleteComment" parameterType="int">
        DELETE
        FROM
            ALBUM_COMMENT A
        WHERE
            A.COMMENT_ID = #{commentId}
    </delete>


    <select id="selectMyComment" parameterType="int" resultType="com.melon.dto.comment.CommentDto">
        SELECT
            C.MEMBER_ID AS memberId,
            A.ALBUM_ID AS albumId,
            C.COMMENT_ID AS commentId,
            C.COMMENT_DETAIL AS commentDetail,
            C.COMMENT_DATE AS commentDate
        FROM
            ALBUM A, ALBUM_COMMENT C
        WHERE
            C.ALBUM_ID = A.ALBUM_ID
          AND
            C.ALBUM_ID = #{albumId}
    </select>

    <update id="albumLikeUpdate">
        UPDATE
            ALBUM
        SET
            ALBUM_LIKE = ALBUM_LIKE + 1
        WHERE
            ALBUM_ID = #{albumId}
    </update>

    <delete id="albumLikeDelete">
        UPDATE
            ALBUM
        SET
            ALBUM_LIKE = ALBUM_LIKE - 1
        WHERE
            ALBUM_ID = #{albumId}
    </delete>

    <select id="selectAlbumLike" parameterType="int" resultType="com.melon.dto.album.AlbumDetails">
        SELECT
            ALBUM_LIKE AS albumLike
        FROM
            ALBUM
        WHERE
            ALBUM_ID = #{albumId}
    </select>

    <insert id="AlbumLikeToUserLike">
        insert into
            USER_LIKE(LIKE_CNT, ALBUM_ID, MEMBER_ID)
        values
            (LIKE_CNT_SEQ.nextval, #{albumId}, #{memberId})
    </insert>
</mapper>
